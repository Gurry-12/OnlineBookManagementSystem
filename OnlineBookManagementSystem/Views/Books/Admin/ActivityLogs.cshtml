@model List<OnlineBookManagementSystem.Models.ActivityLog>

@{
    ViewData["Title"] = "Activity Logs";

    var groupedLogs = Model
        .GroupBy(log =>
            log.Description.Contains("book") ? "Book"
            : log.Description.Contains("User") ? "User"
            : log.ActionType == "Login" || log.ActionType == "Logout" || log.ActionType == "Register" ? "Authentication"
            : "Other")
        .OrderBy(g => g.Key);

    string GetIcon(string key) => key switch
    {
        "User" => "bi-person-circle",
        "Book" => "bi-journal-bookmark",
        "Authentication" => "bi-shield-lock",
        _ => "bi-info-circle"
    };

    string GetBadgeClass(string actionType) => actionType switch
    {
        "Add" => "bg-success",
        "Update" => "bg-warning text-dark",
        "Delete" => "bg-danger",
        "Register" => "bg-info text-dark",
        "Login" => "bg-primary",
        "Logout" => "bg-dark",
        _ => "bg-secondary"
    };
}

<div class="container-fluid px-3 px-md-5 py-4">
    <h2 class="mb-4 text-primary fw-bold"><i class="bi bi-clock-history me-2"></i>Activity Logs</h2>

    @foreach (var group in groupedLogs)
    {
        var icon = GetIcon(group.Key);
        <div class="card mb-4 border-0 shadow rounded-4 overflow-hidden animate__animated animate__fadeIn">
            <div class="card-header bg-gradient bg-primary text-white py-3 d-flex justify-content-between align-items-center">
                <div>
                    <i class="bi @icon me-2"></i>
                    <span class="fw-semibold text-capitalize">@group.Key Activities</span>
                </div>
                <span class="badge bg-light text-primary fw-semibold">@group.Count() logs</span>
            </div>

            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 20%;">Action</th>
                                <th style="width: 60%;">Description</th>
                                <th style="width: 20%;">When</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in group.OrderByDescending(l => l.Timestamp))
                            {
                                <tr>
                                    <td>
                                        <span class="badge @GetBadgeClass(log.ActionType)" data-bs-toggle="tooltip" data-bs-placement="top" title="Action: @log.ActionType">@log.ActionType</span>
                                    </td>
                                    <td>@log.Description</td>
                                    <td>
                                        <span title="@log.Timestamp.ToString("f")" data-bs-toggle="tooltip" data-bs-placement="top" title="Exact Timestamp: @log.Timestamp.ToString("f")">@GetTimeAgo(log.Timestamp)</span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" />
}

@section Scripts {
    <script>
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    </script>
}

@functions {
    public string GetTimeAgo(DateTime time)
    {
        var span = DateTime.Now.Subtract(time);
        if (span.TotalMinutes < 1) return "Just now";
        if (span.TotalMinutes < 60) return $"{(int)span.TotalMinutes} mins ago";
        if (span.TotalHours < 24) return $"{(int)span.TotalHours} hours ago";
        return $"{(int)span.TotalDays} days ago";
    }
}
